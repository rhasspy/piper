name: Test

on:
  push:
    branches: [ master, dev, 'feat/**', 'fix/**' ]
  pull_request:
    branches: [ master, dev ]

jobs:
  test-python:
    name: Python Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.11', '3.12']  # Supporting Python 3.11+
        
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/python/requirements_test.txt
        pip install -e src/python
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y espeak-ng libespeak-ng-dev
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install espeak-ng
        
    - name: Run Python tests
      run: |
        python run_tests.py --python --coverage
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python-${{ matrix.python-version }}-${{ matrix.os }}
        name: Python ${{ matrix.python-version }} - ${{ matrix.os }}
        
  test-cpp:
    name: C++ Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake espeak-ng libespeak-ng-dev
        
    - name: Install dependencies (macOS)  
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake espeak-ng
        
        
    - name: Build
      run: |
        cmake -Bbuild -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release
        
    - name: Run C++ tests
      run: |
        cd build && ctest -V --output-on-failure
        
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-python, test-cpp]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install all dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake espeak-ng libespeak-ng-dev
        python -m pip install --upgrade pip
        pip install -r src/python/requirements_test.txt
        pip install -e src/python
        
    - name: Build project
      run: |
        cmake -Bbuild -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release
        
    - name: Download test model
      run: |
        mkdir -p test/models
        # Download test model if not in repo
        if [ ! -f test/models/en_US-lessac-medium.onnx ]; then
          curl -L -o test/models/en_US-lessac-medium.onnx \
            https://huggingface.co/rhasspy/piper-voices/resolve/v1.0.0/en/en_US/lessac/medium/en_US-lessac-medium.onnx
          curl -L -o test/models/en_US-lessac-medium.onnx.json \
            https://huggingface.co/rhasspy/piper-voices/resolve/v1.0.0/en/en_US/lessac/medium/en_US-lessac-medium.onnx.json
        fi
        
    - name: Run integration tests
      run: |
        python run_tests.py --integration
        
    - name: Test synthesis
      run: |
        echo "Testing English synthesis..."
        echo "Hello world" | ./build/piper \
          --model test/models/en_US-lessac-medium.onnx \
          --output_file test_output.wav
        
        # Verify output exists and has content
        test -f test_output.wav
        test -s test_output.wav
        
  test-japanese:
    name: Japanese TTS Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake espeak-ng libespeak-ng-dev
        # Install pyopenjtalk for Japanese tests
        pip install pyopenjtalk
        
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake espeak-ng
        pip install pyopenjtalk
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/python/requirements_test.txt
        pip install -e src/python
        
    - name: Run Japanese-specific tests
      run: |
        python run_tests.py --japanese --verbose
        
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy pylint
        
    - name: Run Black
      run: |
        black --check src/python src/python_run
        
    - name: Run Flake8
      run: |
        flake8 src/python src/python_run --max-line-length=100 --extend-ignore=E203,W503
        
    - name: Run MyPy
      run: |
        mypy src/python/piper_train --ignore-missing-imports
        
    - name: Run Pylint
      run: |
        pylint src/python/piper_train --disable=C0103,C0114,C0115,C0116,R0913,R0914,W0212