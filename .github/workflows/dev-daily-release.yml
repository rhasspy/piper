name: dev-daily-release

on:
  push:
    branches:
      - dev
      - fix/*
      - feat/*
  workflow_dispatch:
    inputs:
      release_name:
        description: 'リリース名（未指定の場合は日付ベースで自動生成）'
        required: false
        type: string
      release_description:
        description: 'リリース説明（未指定の場合は自動生成）'
        required: false
        type: string

# 環境変数とデフォルト設定
env:
  DOCKER_BUILDKIT: 1
  CMAKE_BUILD_TYPE: Release
  MAX_RETRIES: 3
  RETRY_DELAY: 10

# ワークフロー全体の権限設定
permissions:
  contents: write  # リリースの作成とアップロードに必要
  packages: read   # Dockerイメージのプルに必要

jobs:
  create_dev_release:
    name: Create dev release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_name: ${{ steps.get_release_name.outputs.name }}
      tag_name: ${{ steps.get_release_name.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Generate release name
        id: get_release_name
        run: |
          if [ -n "${{ github.event.inputs.release_name }}" ]; then
            # 手動実行時は入力された名前を使用
            echo "name=${{ github.event.inputs.release_name }}" >> $GITHUB_OUTPUT
            # タグ名にはタイムスタンプを追加して一意にする
            TIMESTAMP=$(date +'%Y%m%d%H%M%S')
            echo "tag_name=${{ github.event.inputs.release_name }}-${TIMESTAMP}" >> $GITHUB_OUTPUT
          else
            # 自動実行時は日付ベースの名前を使用
            DATE=$(date +'%Y%m%d')
            TIMESTAMP=$(date +'%H%M%S')
            echo "name=dev-${DATE}" >> $GITHUB_OUTPUT
            echo "tag_name=dev-${DATE}-${TIMESTAMP}" >> $GITHUB_OUTPUT
          fi
          
          # --- リリースノート作成 ---
          if [ -n "${{ github.event.inputs.release_description }}" ]; then
            # 手動入力がある場合はそのままファイルへ
            printf "%s\n" "${{ github.event.inputs.release_description }}" > description.txt
          else
            # 自動生成
            COMMIT_SHA=$(git rev-parse --short HEAD)
            COMMIT_MSG=$(git log -1 --pretty=%B)
            BUILD_DATE=$(date +'%Y-%m-%d')
            BUILD_TIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')

            {
              echo "Development build for ${BUILD_DATE}"
              echo ""
              echo "## 変更内容"
              echo "- コミット: ${COMMIT_SHA}"
              echo "- メッセージ: ${COMMIT_MSG}"
              echo ""
              echo "## ビルド情報"
              echo "- ビルド日時: ${BUILD_TIME}"
              echo "- プラットフォーム: Linux (x86_64, ARM64, ARMv7), Windows (x64), macOS (x64, ARM64)"
            } > description.txt
          fi

          # description.txt のパスを出力
          echo "description_path=$(pwd)/description.txt" >> $GITHUB_OUTPUT

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ steps.get_release_name.outputs.tag_name }}
          release_name: ${{ steps.get_release_name.outputs.name }}
          body_path: ${{ steps.get_release_name.outputs.description_path }}
          draft: ${{ github.event_name == 'workflow_dispatch' || github.ref_name != 'dev' }}
          prerelease: false

  build_linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: [create_dev_release]
    strategy:
      matrix:
        include:
          - arch: amd64
            target: linux/amd64
          - arch: arm64
            target: linux/arm64
          - arch: arm
            variant: v7
            target: linux/arm/v7
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build package
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.target }}
          load: true
          tags: piper:build
          build-args: |
            TARGETARCH=${{ matrix.arch }}
            TARGETVARIANT=${{ matrix.variant }}
          outputs: type=local,dest=dist

      - name: Verify package
        run: |
          if [ "${{ matrix.arch }}" = "arm" ] && [ "${{ matrix.variant }}" = "v7" ]; then
            if [ ! -f "dist/piper_armv7.tar.gz" ]; then
              echo "Error: Linux armv7 package not found"
              exit 1
            fi
          else
            if [ ! -f "dist/piper_${{ matrix.arch }}.tar.gz" ]; then
              echo "Error: Linux ${{ matrix.arch }} package not found"
              exit 1
            fi
          fi

      - name: Upload Linux package
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_dev_release.outputs.upload_url }}
          asset_path: dist/piper_${{ matrix.arch == 'arm' && matrix.variant == 'v7' && 'armv7' || matrix.arch }}.tar.gz
          asset_name: piper_linux_${{ matrix.arch == 'arm' && matrix.variant == 'v7' && 'armv7' || matrix.arch }}.tar.gz
          asset_content_type: application/gzip

  build_windows:
    name: "Build Windows package"
    runs-on: windows-latest
    needs: create_dev_release
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install dependencies
        run: |
          # GitHub hosted Windows runners already include VS Build Tools 2022 and MSVC
          # Installing the workload again via Chocolatey often hangs at the VS bootstrapper UI.
          # Only install CMake and Ninja which are still required.
          choco install -y cmake ninja
          
          # 環境変数 VSINSTALLDIR を設定 (ilammy/msvc-dev-cmd が使用)
          $vs = &"${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.Component.MSBuild -property installationPath
          if ($vs) {
            [Environment]::SetEnvironmentVariable('VSINSTALLDIR', $vs, 'Process')
          }

          # espeak-ng を Chocolatey でインストール （1.52.0 は 64bit DLL/Binary を含む）
          choco install -y espeak-ng

      - name: Configure build
        run: |
          # espeak-ng ルート
          $ESPEAK_ROOT = "C:/ProgramData/chocolatey/lib/espeak-ng/tools"
          if (Test-Path "$ESPEAK_ROOT\bin") {
            $env:PATH = "$ESPEAK_ROOT\bin;$env:PATH"
            $env:ESPEAK_DATA_PATH = "$ESPEAK_ROOT\share\espeak-ng-data"
            [Environment]::SetEnvironmentVariable("PATH", $env:PATH, "Process")
            [Environment]::SetEnvironmentVariable("ESPEAK_DATA_PATH", $env:ESPEAK_DATA_PATH, "Process")
          }

          # CMake設定
          cmake -Bbuild `
            -G "Ninja" `
            -DCMAKE_INSTALL_PREFIX=_install/piper `
            -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} `
            -DESPEAK_NG_ROOT=$ESPEAK_ROOT
          if ($LASTEXITCODE -ne 0) {
            Write-Error "CMake configuration failed"
            exit 1
          }

      - name: Build package
        run: |
          # ビルドの実行
          cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} --parallel
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Build failed"
            exit 1
          }
          
          # ビルド成果物の確認
          $exePath = if (Test-Path "build\Release\piper.exe") { "build\Release\piper.exe" } elseif (Test-Path "build\piper.exe") { "build\piper.exe" } else { $null }
          if (-not $exePath) {
            Write-Error "piper.exe not found"
            exit 1
          }

      - name: Install package
        run: |
          # インストールの実行
          cmake --install build
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Installation failed"
            exit 1
          }
          
          # インストール後の確認
          if (-not (Test-Path "_install\piper\bin\piper.exe")) {
            Write-Error "piper.exe not found in install directory"
            Get-ChildItem -Path "_install\piper\bin" -ErrorAction SilentlyContinue
            exit 1
          }

      - name: Verify Windows package
        run: |
          # バイナリの存在確認
          $exePath = if (Test-Path "_install\piper\bin\piper.exe") { "_install\piper\bin\piper.exe" } elseif (Test-Path "build\Release\piper.exe") { "build\Release\piper.exe" } elseif (Test-Path "build\piper.exe") { "build\piper.exe" } else { $null }
          if (-not $exePath) {
            Write-Error "piper.exe not found"
            exit 1
          }

          # 簡単なテスト実行 (ヘルプ表示)
          & $exePath --help | Out-Null
          # exit code 0 or 1 は許容する。その他は失敗扱い。
          if ($LASTEXITCODE -gt 1) {
            Write-Error "piper.exe test failed ($LASTEXITCODE)"
            exit 1
          }
          exit 0

      - name: Create archive
        run: |
          $srcDir = if (Test-Path "_install\piper") { "_install\piper" } elseif (Test-Path "build\_install\piper") { "build\_install\piper" } elseif (Test-Path "build\Release") { "build\Release" } else { $null }
          if (-not $srcDir) { Write-Error "No directory to archive"; exit 1 }
          $dest = "_install\piper_windows_amd64.zip"
          try {
            Compress-Archive -Path "$srcDir\*" -DestinationPath $dest -Force
          } catch {
            Write-Error "Compress-Archive failed: $_"
            exit 1
          }

          if (-not (Test-Path $dest)) {
            Write-Error "Archive not created"
            exit 1
          }

      - name: Upload Windows package
        id: upload
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_dev_release.outputs.upload_url }}
          asset_path: _install/piper_windows_amd64.zip
          asset_name: piper_windows_amd64.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Retry upload if failed
        if: failure() && steps.upload.outcome == 'failure'
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            async function uploadWithRetry() {
              const maxRetries = ${{ env.MAX_RETRIES }};
              const retryDelay = ${{ env.RETRY_DELAY }} * 1000;
              const assetPath = '_install/piper_windows_amd64.zip';
              const assetName = 'piper_windows_amd64.zip';
              const uploadUrl = '${{ needs.create_dev_release.outputs.upload_url }}';
              
              for (let i = 0; i < maxRetries; i++) {
                try {
                  console.log(`Retry attempt ${i + 1} of ${maxRetries}`);
                  const response = await github.rest.repos.uploadReleaseAsset({
                    url: uploadUrl,
                    name: assetName,
                    data: fs.readFileSync(assetPath),
                    headers: {
                      'content-type': 'application/zip',
                      'content-length': fs.statSync(assetPath).size
                    }
                  });
                  console.log('Upload succeeded on retry ' + (i + 1));
                  return true;
                } catch (error) {
                  console.error(`Attempt ${i + 1} failed:`, error.message);
                  if (i < maxRetries - 1) {
                    await new Promise(resolve => setTimeout(resolve, retryDelay));
                  }
                }
              }
              throw new Error('All retry attempts failed');
            }
            
            await uploadWithRetry();

  build_macos:
    name: "Build macOS packages"
    needs: create_dev_release
    strategy:
      fail-fast: true
      matrix:
        include:
          - arch: x64
            runner: macos-13   # Intel
          - arch: aarch64
            runner: macos-14   # Apple Silicon
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Install Rosetta 2 (x64 only)
        if: matrix.arch == 'x64' && runner.arch == 'ARM64'
        run: |
          # Rosetta 2のインストールを待機
          /usr/sbin/softwareupdate --install-rosetta --agree-to-license || true
          # インストールの完了を確認
          /usr/bin/arch -x86_64 /usr/bin/true || {
            echo "Rosetta 2 installation failed or not ready"
            exit 1
          }

      - name: Setup Homebrew
        run: |
          # Homebrewの環境設定
          echo "::group::Setup Homebrew"
          if [ "${{ matrix.arch }}" = "x64" ]; then
            # x64用のHomebrew設定
            eval "$(/usr/local/bin/brew shellenv)"
          else
            # arm64用のHomebrew設定
            eval "$(/opt/homebrew/bin/brew shellenv)"
          fi
          echo "::endgroup::"

      - name: Install dependencies
        run: |
          echo "::group::Install dependencies"
          if [ "${{ matrix.arch }}" = "x64" ]; then
            # x64用の依存関係（Rosetta 2を使用）
            arch -x86_64 brew install cmake espeak-ng ninja
          else
            # arm64用の依存関係
            brew install cmake espeak-ng ninja
          fi
          echo "::endgroup::"

      - name: Configure build
        run: |
          echo "::group::Configure build"
          # アーキテクチャに応じたCMAKE_OSX_ARCHITECTURESを設定
          if [ "${{ matrix.arch }}" = "x64" ]; then
            export CMAKE_OSX_ARCHITECTURES="x86_64"
            export CMAKE_OSX_DEPLOYMENT_TARGET="10.15"
            # x64用のビルド環境（Rosetta 2を使用）
            arch -x86_64 cmake -Bbuild \
              -G "Ninja" \
              -DCMAKE_INSTALL_PREFIX=_install/piper \
              -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
              -DCMAKE_OSX_ARCHITECTURES=$CMAKE_OSX_ARCHITECTURES \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=$CMAKE_OSX_DEPLOYMENT_TARGET
          else
            export CMAKE_OSX_ARCHITECTURES="arm64"
            export CMAKE_OSX_DEPLOYMENT_TARGET="11.0"
            # arm64用のビルド環境
            cmake -Bbuild \
              -G "Ninja" \
              -DCMAKE_INSTALL_PREFIX=_install/piper \
              -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
              -DCMAKE_OSX_ARCHITECTURES=$CMAKE_OSX_ARCHITECTURES \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=$CMAKE_OSX_DEPLOYMENT_TARGET
          fi
          
          if [ $? -ne 0 ]; then
            echo "::error::CMake configuration failed"
            exit 1
          fi
          echo "::endgroup::"

      - name: Build package
        run: |
          echo "::group::Build package"
          # アーキテクチャに応じたビルド
          if [ "${{ matrix.arch }}" = "x64" ]; then
            arch -x86_64 cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} --parallel
          else
            cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} --parallel
          fi
          
          if [ $? -ne 0 ]; then
            echo "::error::Build failed"
            exit 1
          fi
          
          # ビルド成果物の確認
          if [ ! -f "build/piper" ]; then
            echo "::error::piper binary not found in build directory"
            exit 1
          fi
          echo "::endgroup::"

      - name: Install package
        run: |
          # アーキテクチャに応じたインストール
          if [ "${{ matrix.arch }}" = "x64" ]; then
            /usr/bin/arch -x86_64 cmake --install build
          else
            /opt/homebrew/bin/cmake --install build
          fi
          
          if [ $? -ne 0 ]; then
            echo "::error::Installation failed"
            exit 1
          fi
          
          # インストール後の確認
          if [ ! -f "_install/piper/bin/piper" ]; then
            echo "::error::piper binary not found in install directory"
            ls -la _install/piper/bin/ || true
            exit 1
          fi
          
          # 実行権限の確認と設定
          chmod +x _install/piper/bin/piper
          if [ ! -x "_install/piper/bin/piper" ]; then
            echo "::error::Failed to set executable permissions"
            exit 1
          fi

      - name: Verify macOS package
        run: |
          # バイナリの存在確認
          if [ ! -f "_install/piper/bin/piper" ]; then
            echo "::error::macOS package is missing piper binary"
            exit 1
          fi
          
          # バイナリの実行権限確認
          if [ ! -x "_install/piper/bin/piper" ]; then
            echo "::error::macOS package binary is not executable"
            exit 1
          fi
          
          # バイナリのアーキテクチャ確認
          file "_install/piper/bin/piper"
          lipo -info "_install/piper/bin/piper"
          
          # アーキテクチャに応じたテスト実行
          if [ "${{ matrix.arch }}" = "x64" ]; then
            /usr/bin/arch -x86_64 echo "Testing piper binary..." | _install/piper/bin/piper --help
          else
            /usr/bin/arch -arm64 echo "Testing piper binary..." | _install/piper/bin/piper --help
          fi || {
            echo "::error::piper binary test failed"
            exit 1
          }

      - name: Create archive
        run: |
          cd _install && \
          tar -czf piper_macos_${{ matrix.arch }}.tar.gz piper/
          if [ $? -ne 0 ]; then
            echo "::error::Failed to create archive"
            exit 1
          fi
          
          # アーカイブの確認
          if [ ! -f "piper_macos_${{ matrix.arch }}.tar.gz" ]; then
            echo "::error::Archive not created"
            exit 1
          fi

      - name: Upload macOS package
        id: upload
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_dev_release.outputs.upload_url }}
          asset_path: _install/piper_macos_${{ matrix.arch }}.tar.gz
          asset_name: piper_macos_${{ matrix.arch }}.tar.gz
          asset_content_type: application/gzip
        continue-on-error: true

      - name: Retry upload if failed
        if: failure() && steps.upload.outcome == 'failure'
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            async function uploadWithRetry() {
              const maxRetries = ${{ env.MAX_RETRIES }};
              const retryDelay = ${{ env.RETRY_DELAY }} * 1000;
              const assetPath = '_install/piper_macos_${{ matrix.arch }}.tar.gz';
              const assetName = 'piper_macos_${{ matrix.arch }}.tar.gz';
              const uploadUrl = '${{ needs.create_dev_release.outputs.upload_url }}';
              
              for (let i = 0; i < maxRetries; i++) {
                try {
                  console.log(`Retry attempt ${i + 1} of ${maxRetries}`);
                  const response = await github.rest.repos.uploadReleaseAsset({
                    url: uploadUrl,
                    name: assetName,
                    data: fs.readFileSync(assetPath),
                    headers: {
                      'content-type': 'application/gzip',
                      'content-length': fs.statSync(assetPath).size
                    }
                  });
                  console.log('Upload succeeded on retry ' + (i + 1));
                  return true;
                } catch (error) {
                  console.error(`Attempt ${i + 1} failed:`, error.message);
                  if (i < maxRetries - 1) {
                    await new Promise(resolve => setTimeout(resolve, retryDelay));
                  }
                }
              }
              throw new Error('All retry attempts failed');
            }
            
            await uploadWithRetry();

  publish_pypi:
    name: "Build & Publish Python package to PyPI"
    needs: [create_dev_release]
    runs-on: ubuntu-latest
    if: github.repository == 'ayutaz/piper-plus' && (github.ref == 'refs/heads/dev' || github.event_name == 'workflow_dispatch')
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install build tool
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Update python package version
        run: |
          TAG_NAME="${{ needs.create_dev_release.outputs.tag_name }}"
          DATE=$(echo "$TAG_NAME" | cut -d'-' -f2)
          TIME=$(echo "$TAG_NAME" | cut -d'-' -f3)
          VERSION="${DATE}.${TIME}"  # CalVer, e.g., 20250619.123456
          echo "Package version will be $VERSION"
          sed -i -E "s/version=\"[^\"]+\"/version=\"${VERSION}\"/" src/python_run/setup.py

      - name: Build piper-tts-plus package
        run: |
          cd src/python_run
          python -m build --sdist --wheel -o dist

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PIPY_TOKEN }}
        run: |
          python -m twine upload --non-interactive --skip-existing src/python_run/dist/*
