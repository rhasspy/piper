name: Windows Debug Build

# This workflow is for development and debugging purposes.
# For production builds and releases, use dev-daily-release.yml

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: false
        default: 'Debug'
        type: choice
        options:
          - Debug
          - Release
  # Only run on push to specific debugging branches
  push:
    branches:
      - 'debug/**'
      - 'test/**'

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64]
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.22.0'

      - name: Configure
        run: |
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022" -A ${{ matrix.arch }} -DCMAKE_BUILD_TYPE=${{ github.event.inputs.build_type || 'Debug' }}

      - name: Build
        run: |
          cd build
          cmake --build . --config ${{ github.event.inputs.build_type || 'Debug' }} --parallel 2

      - name: List build outputs
        run: |
          cd build
          Get-ChildItem -Path . -Filter *.exe -Recurse
          Get-ChildItem -Path . -Filter *.dll -Recurse
          Get-ChildItem -Path . -Filter *.lib -Recurse

      - name: Test ONNX Runtime
        run: |
          cd build
          # Check if ONNX Runtime was downloaded
          if (Test-Path "onnxruntime/onnxruntime-win-x64-1.14.1/lib/onnxruntime.dll") {
            echo "✓ ONNX Runtime DLL downloaded successfully"
          } else {
            echo "⚠ ONNX Runtime DLL not in expected location"
            echo "Checking ONNX Runtime directory structure:"
            if (Test-Path "onnxruntime") {
              Get-ChildItem -Path onnxruntime -Recurse -Filter "*.dll" -ErrorAction SilentlyContinue | Select-Object -First 10
            }
          }
          # The DLL will be copied to Release/ during the build process

      - name: Check test dependencies
        run: |
          cd build
          $buildDir = "${{ github.event.inputs.build_type || 'Debug' }}"
          echo "=== Checking test_piper.exe dependencies ==="
          if (Get-Command dumpbin -ErrorAction SilentlyContinue) {
            dumpbin /dependents "$buildDir/test_piper.exe"
          }
          echo ""
          echo "=== Files in $buildDir directory ==="
          Get-ChildItem -Path $buildDir -Filter *.dll
          echo ""
          echo "=== Files in test directory (if different) ==="
          if (Test-Path "test/$buildDir") {
            Get-ChildItem -Path "test/$buildDir" -Filter *.dll
          }

      - name: Copy test voice model
        run: |
          cd build
          $buildDir = "${{ github.event.inputs.build_type || 'Debug' }}"
          # Ensure test voice model is available
          if (Test-Path "../etc/test_voice.onnx") {
            Copy-Item "../etc/test_voice.onnx" -Destination "$buildDir/" -Force
            Copy-Item "../etc/test_voice.onnx.json" -Destination "$buildDir/" -Force -ErrorAction SilentlyContinue
          }

      - name: Run tests with debugging
        run: |
          cd build
          $buildDir = "${{ github.event.inputs.build_type || 'Debug' }}"
          # Set PATH to include build directory for DLL lookup
          $env:PATH = "$PWD\$buildDir;$env:PATH"
          # Set espeak-ng data path
          $env:ESPEAK_DATA_PATH = "$PWD\$buildDir\espeak-ng-data"
          
          # Enable Windows error reporting
          $env:_NT_SYMBOL_PATH = "srv*c:\symbols*http://msdl.microsoft.com/download/symbols"
          
          # Check if all required DLLs are present
          echo "=== Checking DLL dependencies ==="
          $requiredDlls = @("onnxruntime.dll", "espeak-ng.dll", "piper_phonemize.dll")
          foreach ($dll in $requiredDlls) {
            if (Test-Path "$buildDir/$dll") {
              echo "✓ Found: $dll"
            } else {
              echo "✗ Missing: $dll"
            }
          }
          
          # Run test with detailed error capture
          echo ""
          echo "=== Running test_piper with error capture ==="
          try {
            $proc = Start-Process -FilePath "./$buildDir/test_piper.exe" `
              -ArgumentList "../etc/test_voice.onnx", "$PWD\$buildDir\espeak-ng-data", "./test.wav" `
              -Wait -PassThru -NoNewWindow
            echo "Exit code: $($proc.ExitCode)"
            if ($proc.ExitCode -eq -1073741819) {
              echo "ERROR: Access violation (0xC0000005)"
            } elseif ($proc.ExitCode -eq -1073741515) {
              echo "ERROR: DLL not found (0xC0000135)"
            } elseif ($proc.ExitCode -ne 0) {
              echo "ERROR: Unknown error code: $($proc.ExitCode)"
            }
          } catch {
            echo "ERROR: Exception during test execution: $_"
          }
          
          echo ""
          echo "=== Running via CTest with verbose output ==="
          ctest -C ${{ github.event.inputs.build_type || 'Debug' }} --output-on-failure -VV --debug

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: piper-windows-${{ matrix.arch }}-${{ github.event.inputs.build_type || 'Debug' }}
          path: |
            build/${{ github.event.inputs.build_type || 'Debug' }}/piper.exe
            build/${{ github.event.inputs.build_type || 'Debug' }}/test_piper.exe
            build/${{ github.event.inputs.build_type || 'Debug' }}/*.dll
          retention-days: 7

  test-windows-binary:
    needs: build-windows
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64]
    
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: piper-windows-${{ matrix.arch }}-${{ github.event.inputs.build_type || 'Debug' }}
          path: test-binary

      - name: Test binary execution
        run: |
          cd test-binary
          echo "Testing piper.exe..."
          ./piper.exe --version || echo "Failed to run piper.exe"
          
      - name: Check dependencies
        run: |
          cd test-binary
          echo "Checking DLL dependencies..."
          if (Get-Command dumpbin -ErrorAction SilentlyContinue) {
            dumpbin /dependents piper.exe
          } else {
            echo "dumpbin not available (this is OK)"
          }