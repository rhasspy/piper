name: Test Built Binaries

on:
  workflow_run:
    workflows: ["dev-daily-release"]
    types:
      - completed
  pull_request:
    branches: [ dev, master ]
  push:
    branches: [ dev, master, 'feat/**', 'fix/**' ]

jobs:
  test-binaries:
    name: Test Binaries
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: amd64
          - os: windows-latest
            platform: windows
            arch: amd64
          - os: macos-latest
            platform: macos
            arch: aarch64

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Download latest release (workflow_run)
      if: github.event_name == 'workflow_run'
      uses: actions/download-artifact@v4
      with:
        name: piper-${{ matrix.platform }}-${{ matrix.arch }}
        path: ./dist

    - name: Download dev release (PR/push)
      if: github.event_name != 'workflow_run'
      run: |
        # Download the latest dev release for testing
        if [ "${{ matrix.platform }}" = "windows" ]; then
          curl -L -o piper.zip https://github.com/ayutaz/piper-plus/releases/download/dev/piper_${{ matrix.platform }}_${{ matrix.arch }}.zip || true
          if [ -f piper.zip ]; then
            unzip piper.zip -d ./dist
          fi
        else
          curl -L -o piper.tar.gz https://github.com/ayutaz/piper-plus/releases/download/dev/piper_${{ matrix.arch }}.tar.gz || true
          if [ -f piper.tar.gz ]; then
            mkdir -p ./dist
            tar -xzf piper.tar.gz -C ./dist
          fi
        fi
      shell: bash

    - name: Run binary tests (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        # Test if binary exists and is executable
        if [ -f ./dist/piper/bin/piper ]; then
          chmod +x ./dist/piper/bin/piper
          ./dist/piper/bin/piper --help
          
          # Test basic TTS
          echo "Testing text to speech" | ./dist/piper/bin/piper --model etc/test_voice.onnx --output_file test.wav || true
          
          # Check if output was created
          if [ -f test.wav ]; then
            echo "✅ Basic TTS test passed"
          else
            echo "⚠️ Basic TTS test failed - no output file"
          fi
        else
          echo "⚠️ Binary not found at expected location"
        fi

    - name: Run binary tests (Windows)
      if: matrix.platform == 'windows'
      shell: powershell
      run: |
        # Test if binary exists
        if (Test-Path "./dist/piper.exe") {
          # Test help
          ./dist/piper.exe --help
          
          # Test basic TTS
          "Testing text to speech" | ./dist/piper.exe --model etc/test_voice.onnx --output_file test.wav
          
          # Check if output was created
          if (Test-Path "test.wav") {
            Write-Host "✅ Basic TTS test passed"
          } else {
            Write-Host "⚠️ Basic TTS test failed - no output file"
          }
        } else {
          Write-Host "⚠️ Binary not found at expected location"
        }

  test-python-components:
    name: Test Python Components
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']
        exclude:
          # Skip problematic combinations
          - os: macos-latest
            python-version: '3.9'

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install test dependencies only
      run: |
        python -m pip install --upgrade pip
        pip install -r src/python/requirements_test.txt

    - name: Run unit tests (no dependencies)
      run: |
        # Run only tests that don't require piper-train installation
        python -m pytest src/python/tests/test_token_mapper_impl.py -v || true
        python -m pytest src/python_run/tests/test_util_impl.py -v || true

    - name: Check test structure
      run: |
        python run_tests.py --help

  test-cpp-build:
    name: Test C++ Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libgtest-dev

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake googletest

    - name: Build with tests
      run: |
        cmake -Bbuild -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON
        cmake --build build --config Release

    - name: Run C++ tests
      run: |
        cd build && ctest -V --output-on-failure || true