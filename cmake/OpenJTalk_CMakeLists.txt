cmake_minimum_required(VERSION 3.13)
project(OpenJTalk C CXX)

# OpenJTalk 1.11 - CMake build configuration for Windows
# Based on the original autotools configuration

set(CMAKE_C_STANDARD 99)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Configuration options
option(BUILD_SHARED_LIBS "Build shared libraries" OFF)

# Version information
set(OPEN_JTALK_VERSION "1.11")
set(OPEN_JTALK_VERSION_MAJOR 1)
set(OPEN_JTALK_VERSION_MINOR 11)

# Find HTSEngine
if(NOT HTS_ENGINE_INCLUDE_DIR OR NOT HTS_ENGINE_LIB)
  message(FATAL_ERROR "HTSEngine not found. Please set HTS_ENGINE_INCLUDE_DIR and HTS_ENGINE_LIB")
endif()

# Source files for mecab
set(MECAB_SOURCES
  mecab/src/char_property.cpp
  mecab/src/connector.cpp
  mecab/src/context_id.cpp
  mecab/src/dictionary.cpp
  mecab/src/dictionary_compiler.cpp
  mecab/src/dictionary_generator.cpp
  mecab/src/dictionary_rewriter.cpp
  mecab/src/eval.cpp
  mecab/src/feature_index.cpp
  mecab/src/iconv_utils.cpp
  mecab/src/lbfgs.cpp
  mecab/src/learner.cpp
  mecab/src/learner_tagger.cpp
  mecab/src/libmecab.cpp
  mecab/src/nbest_generator.cpp
  mecab/src/param.cpp
  mecab/src/string_buffer.cpp
  mecab/src/tagger.cpp
  mecab/src/tokenizer.cpp
  mecab/src/utils.cpp
  mecab/src/viterbi.cpp
  mecab/src/writer.cpp
)

# Source files for njd
set(NJD_SOURCES
  njd/njd.c
  njd/njd_node.c
  njd_set_accent_phrase/njd_set_accent_phrase.c
  njd_set_accent_type/njd_set_accent_type.c
  njd_set_digit/njd_set_digit.c
  njd_set_long_vowel/njd_set_long_vowel.c
  njd_set_pronunciation/njd_set_pronunciation.c
  njd_set_unvoiced_vowel/njd_set_unvoiced_vowel.c
)

# Source files for jpcommon
set(JPCOMMON_SOURCES
  jpcommon/jpcommon.c
  jpcommon/jpcommon_label.c
  jpcommon/jpcommon_node.c
)

# Source files for text2mecab
set(TEXT2MECAB_SOURCES
  text2mecab/text2mecab.c
)

# Source files for mecab2njd
set(MECAB2NJD_SOURCES
  mecab2njd/mecab2njd.c
)

# Create mecab library
add_library(mecab STATIC ${MECAB_SOURCES})
target_include_directories(mecab PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}/mecab/src
  ${CMAKE_CURRENT_SOURCE_DIR}
)

# Windows-specific definitions for mecab
if(WIN32)
  target_compile_definitions(mecab PRIVATE
    DIC_VERSION=102
    HAVE_WINDOWS_H
    PACKAGE="open_jtalk"
    VERSION="${OPEN_JTALK_VERSION}"
    MECAB_DEFAULT_RC=""
    _CRT_SECURE_NO_WARNINGS
  )
  
  # Add Windows compatibility
  target_sources(mecab PRIVATE mecab/src/winmain.h)
else()
  target_compile_definitions(mecab PRIVATE
    DIC_VERSION=102
    HAVE_UNISTD_H
    HAVE_DIRENT_H
    HAVE_FCNTL_H
    HAVE_SYS_STAT_H
    HAVE_SYS_TYPES_H
    HAVE_SYS_MMAN_H
    PACKAGE="open_jtalk"
    VERSION="${OPEN_JTALK_VERSION}"
    MECAB_DEFAULT_RC=""
  )
endif()

# Create OpenJTalk library
add_library(openjtalk STATIC
  ${NJD_SOURCES}
  ${JPCOMMON_SOURCES}
  ${TEXT2MECAB_SOURCES}
  ${MECAB2NJD_SOURCES}
)

target_include_directories(openjtalk PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${CMAKE_CURRENT_SOURCE_DIR}/njd
  ${CMAKE_CURRENT_SOURCE_DIR}/njd_set_accent_phrase
  ${CMAKE_CURRENT_SOURCE_DIR}/njd_set_accent_type
  ${CMAKE_CURRENT_SOURCE_DIR}/njd_set_digit
  ${CMAKE_CURRENT_SOURCE_DIR}/njd_set_long_vowel
  ${CMAKE_CURRENT_SOURCE_DIR}/njd_set_pronunciation
  ${CMAKE_CURRENT_SOURCE_DIR}/njd_set_unvoiced_vowel
  ${CMAKE_CURRENT_SOURCE_DIR}/jpcommon
  ${CMAKE_CURRENT_SOURCE_DIR}/text2mecab
  ${CMAKE_CURRENT_SOURCE_DIR}/mecab2njd
  ${CMAKE_CURRENT_SOURCE_DIR}/mecab/src
  ${HTS_ENGINE_INCLUDE_DIR}
)

target_link_libraries(openjtalk PUBLIC mecab)

# Windows-specific settings
if(WIN32)
  target_compile_definitions(openjtalk PRIVATE
    _CRT_SECURE_NO_WARNINGS
    ASCII_HEADER
  )
  
  # Use same runtime library as parent project
  if(MSVC)
    set_property(TARGET mecab PROPERTY MSVC_RUNTIME_LIBRARY ${CMAKE_MSVC_RUNTIME_LIBRARY})
    set_property(TARGET openjtalk PROPERTY MSVC_RUNTIME_LIBRARY ${CMAKE_MSVC_RUNTIME_LIBRARY})
  endif()
endif()

# Apply C++17 compatibility patch for MeCab
if(WIN32 AND CMAKE_CXX_STANDARD GREATER_EQUAL 17)
  # Apply patch to dictionary.cpp for C++17 compatibility
  message(STATUS "Applying C++17 compatibility patch to MeCab dictionary.cpp")
  execute_process(
    COMMAND ${CMAKE_COMMAND} -E copy
      ${CMAKE_CURRENT_SOURCE_DIR}/../openjtalk_dictionary_patch.txt
      ${CMAKE_CURRENT_SOURCE_DIR}/dictionary.patch
    RESULT_VARIABLE patch_copy_result
  )
  
  if(NOT patch_copy_result EQUAL 0)
    message(WARNING "Failed to copy patch file")
  else()
    # Try to apply the patch
    find_program(PATCH_EXECUTABLE patch)
    if(PATCH_EXECUTABLE)
      execute_process(
        COMMAND ${PATCH_EXECUTABLE} -p1 -N -s
        INPUT_FILE ${CMAKE_CURRENT_SOURCE_DIR}/dictionary.patch
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        RESULT_VARIABLE patch_result
        OUTPUT_QUIET
        ERROR_QUIET
      )
      if(patch_result EQUAL 0)
        message(STATUS "Successfully applied C++17 compatibility patch")
      endif()
    else()
      message(WARNING "patch command not found, using sed fallback")
      # Fallback: Use CMake to modify the file directly
      file(READ "${CMAKE_CURRENT_SOURCE_DIR}/mecab/src/dictionary.cpp" DICT_CONTENT)
      # Check if already patched
      if(NOT DICT_CONTENT MATCHES "__cplusplus >= 201703L")
        # Replace the struct definition
        string(REPLACE
          "namespace {
template <typename T1, typename T2>
struct pair_1st_cmp: public std::binary_function<bool, T1, T2> {
  bool operator()(const std::pair<T1, T2> &x1,"
          "namespace {
template <typename T1, typename T2>
#if __cplusplus >= 201703L
struct pair_1st_cmp {
  typedef T1 first_argument_type;
  typedef T2 second_argument_type;
  typedef bool result_type;
#else
struct pair_1st_cmp: public std::binary_function<bool, T1, T2> {
#endif
  bool operator()(const std::pair<T1, T2> &x1,"
          DICT_CONTENT "${DICT_CONTENT}")
        file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/mecab/src/dictionary.cpp" "${DICT_CONTENT}")
        message(STATUS "Applied C++17 compatibility patch using CMake")
      endif()
    endif()
  endif()
endif()

# Build open_jtalk executable
add_executable(open_jtalk bin/open_jtalk.c)
target_link_libraries(open_jtalk PRIVATE
  openjtalk
  mecab
  ${HTS_ENGINE_LIB}
)

if(NOT WIN32)
  target_link_libraries(open_jtalk PRIVATE m)
endif()

target_include_directories(open_jtalk PRIVATE
  ${CMAKE_CURRENT_SOURCE_DIR}
  ${HTS_ENGINE_INCLUDE_DIR}
)

# Install configuration
install(TARGETS openjtalk mecab
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION bin
)

install(TARGETS open_jtalk
  RUNTIME DESTINATION bin
)

# Install headers
install(FILES 
  njd/njd.h
  jpcommon/jpcommon.h
  mecab/src/mecab.h
  DESTINATION include
)